<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="project.spring.calla.FreeBoardMapper">
<!-- namespace : dao 클래스의 sqlSession과 연결하기 위한 키로 사용 -->

	<!--  
	* mapper 태그
	<insert>. <select>, <update>, <delete>
	dao - sqlSession의 함수(insert, selectOne, selectList, update, delete)
	와 매핑되어 쿼리를 수행
	
	* mapper 태그의 id 속성
	dao 클래스의 sqlSession 특정 함수와 연결하기 위해 사용
	
	* mapper 쿼리 특징
	${key 이름} : mybatis-config.xml의 property - name과 매칭. DB 테이블의 칼럼
	#{key 이름} : dao 클래스의 sqlSession에서 전송받은 데이터 변수명(입력받은 데이터)
	 -->


	 <insert id="insert">
	 	insert into ${f_board}
	 	(${memberNickname}, ${fBoardTitle}, ${fBoardContent}, ${fBoardViews}, ${fBoardImagePath}) 
	 	values 
	 	(#{memberNickname}, #{fBoardTitle}, #{fBoardContent}, #{fBoardViews}, #{fBoardImagePath})
	 </insert>
	 
	  <select id="select_all" resultType="FBoardVO">
	 	select * from ${f_board}
	 	order by ${fBoardId} desc
	 </select>
	 
	 <select id="select_by_board_id" resultType="FBoardVO">
	 	select * from ${f_board} where ${fBoardId} = #{fBoardId}
	 </select>
	 
	 <update id="update">
	 	update ${f_board}
	 	set ${fBoardTitle} = #{fBoardTitle}, ${fBoardContent} = #{fBoardContent}, ${fBoardImagePath} = #{fBoardImagePath}
	 	where ${fBoardId} = #{fBoardId}
	 </update>
	 
	 <delete id="delete">
	 	delete from ${f_board}
	 	where ${fBoardId} = #{fBoardId}
	 </delete>
	 
	 <select id="paging" resultType="FBoardVO">
	 	select ${fBoardId}, ${fBoardTitle}, ${fBoardContent}, ${memberNickname}, ${fBoardCreatedDate}, ${fBoardViews}, ${fBoardCommentCount}, ${fBoardImagePath}
	 	from(
	 		select rownum rn, a.* from(
	 			select * from ${f_board} order by ${fBoardId} desc
	 		)a
	 	) where rn between #{start} and #{end}
	 </select>
	 <!-- 
	 #{start} : criteria.getStart()
	 #{end} : criteria.getEnd()
	  -->
	  
	 <select id="total_count" resultType="Integer">
	  	select count(*) total_cnt from ${f_board}
	 </select>
	 
	 <select id="select_by_membernickname" resultType="FBoardVO">
	 	select ${fBoardId}, ${fBoardTitle}, ${fBoardContent}, ${memberNickname}, ${fBoardCreatedDate}, ${fBoardViews}, ${fBoardCommentCount}
	 	from(
	 		select rownum rn, a.* from(
	 			select * from ${f_board} where ${memberNickname} like #{keyword}  
	 			order by ${fBoardId} desc
	 		)a
	 	) where rn between #{start} and #{end}
	 </select>
	 
	 <select id="total_count_like_membernickname" resultType="Integer">
	  	select count(*) total_cnt from ${f_board} where ${memberNickname} like #{keyword}
	 </select>
	 
	 <select id="select_by_title_content" resultType="FBoardVO">
	 	select ${fBoardId}, ${fBoardTitle}, ${fBoardContent}, ${memberNickname}, ${fBoardCreatedDate}, ${fBoardViews}, ${fBoardCommentCount}
	 	from(
	 		select rownum rn, a.* from(
	 			select * from ${f_board} 
	 			where ${fBoardTitle} like #{keyword} or 
	 			${fBoardContent} like #{keyword}
	 			order by ${fBoardId} desc
	 		)a
	 	) where rn between #{start} and #{end}

	 </select> 
	 
	 <select id="total_count_by_title_content" resultType="Integer">
	  	select count(*) total_cnt from ${f_board} 
	  	where ${fBoardTitle} like #{keyword} or	${fBoardContent} like #{keyword}
	 </select>
	 
	 <update id="update_comment_count">
	 	update ${f_board}
	 	set ${fBoardCommentCount} = ${fBoardCommentCount} + #{amount}
	 	where ${fBoardId} = #{fBoardId}
	 </update>
	 
	 <update id="update_views">
	 	update ${f_board}
	 	set ${fBoardViews} = ${fBoardViews} + #{views}
	 	where ${fBoardId} = #{fBoardId}
	 </update>
	 
	 <select id="select_all_by_memberNickname" resultType="FBoardVO">
	 	select *
	 	from (
	 		select rownum rn, a.* 
	 		from(
	 			select * from ${f_board} where ${memberNickname} = #{memberNickname}
	 			order by ${fBoardCreatedDate} desc
	 		) a
	 	) where rn between #{criteria.start} and #{criteria.end}
	 </select>
	 
	 <select id="get_total_count_by_memberNickname" resultType="Integer">
	 	select count(*) from ${f_board} where ${memberNickname} = #{memberNickname}
	 </select>
</mapper>